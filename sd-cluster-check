#!/usr/bin/env python
"""sd-cluster-check

Script for determining information about High availability clusters on RHEL/CentOS
from extracted sosreports.

WARNING: This is not production ready yet. So far this is a proof of concept
and code is a mess.

__author__ = "Ondrej Famera"
__email__ = "ofamera@redhat.com"
__license__ = "GPLv3"
__status__ = "Proof-of-Concept"
"""
import os.path
import re

# xml parsing
import xml.etree.ElementTree as ET

# find the all sosreports
clusters = {}

### parsing input paths
import getopt, sys
import subprocess
try:
    opts, args = getopt.getopt(sys.argv,"h",[])
except getopt.GetoptError:
    print "error parsing arguments"
    sys.exit(2)

sosreport_list = []
print "Searching for sosreports in given path(s)"
for path in args[1:]:
    print "path: "+path
    output = subprocess.check_output("find "+path+" -maxdepth 3 -name sos_commands -type d", shell=True)
    for row in output.split('\n'):
        if len(row) > 0:
            row_data = row.split('/')
            print 'found '+'/'.join(row_data[0:-1])
            sosreport_list.append('/'.join(row_data[0:-1]))
###
print str(len(sosreport_list))+" sosreport(s) found, processing them now"

def check_ip ( sosreport_path, ip ):
    "Check if IP address is active on system"
    mymatch = None
    ## check if we have networking information
    if (os.path.isfile(sosreport_path+'/sos_commands/networking/ip_-o_addr')):
        ifile = open(sosreport_path+'/sos_commands/networking/ip_-o_addr', 'r')
        ip_match = re.compile(r"^.*inet " + re.escape(ip) + "/.*$")
        for line in ifile.readlines():
            mymatch = ip_match.search(line)
            if mymatch:
                return True
    elif (os.path.isfile(sosreport_path+'/sos_commands/networking/ifconfig_-a')):
        ifile = open(sosreport_path+'/sos_commands/networking/ifconfig_-a', 'r')
        ip_match = re.compile(r"^.*inet addr:" + re.escape(ip) + "\s+.*$")
        for line in ifile.readlines():
            mymatch = ip_match.search(line)
            if mymatch:
                return True
    else:
        print "[e] sosreport doesn't containt any networking information ('ifconfig' nor 'ip addr')"
        return False

for sosreport in sosreport_list:
    print ""
    cluster_name = ""

    # give up if we don't have a sos_commands/cluster directory
    if not (os.path.isdir(sosreport+'/sos_commands/cluster')):
        print "NO RH CLUSTER here"
        continue
    print "# we have a cluster dir"

## rgmanager cluster part
    if (os.path.isfile(sosreport+'/etc/cluster/cluster.conf')):
        print "## /etc/cluster/cluster.conf detected"
        tree = ET.parse(sosreport+'/etc/cluster/cluster.conf')
        clusterroot = tree.getroot()
        cluster_name = clusterroot.attrib['name']
        if cluster_name not in clusters:
            clusters[cluster_name] = {}
        # get node ids
        for node in clusterroot.findall('.//clusternode'):
            if node.attrib['nodeid'] not in clusters[cluster_name]:
                clusters[cluster_name][node.attrib['nodeid']] = { 'name': node.attrib['name'], 'node_id': node.attrib['nodeid'], 'has_crm_report': False, 'has_sos_report': False }
            ###
            mymatch = None
            host_match = re.compile(r"^(?P<ip>\d+\.\d+\.\d+\.\d+)\s+" + node.attrib['name'] + "(\s+.*|$)")
            hfile = open(sosreport+'/etc/hosts','r')
            for line in hfile.readlines():
                mymatch = host_match.search(line)
                if mymatch:
                    break
            if mymatch:
                clusters[cluster_name][node.attrib['nodeid']]['ip'] = mymatch.group('ip')
                if check_ip (sosreport, mymatch.group('ip')):
                    clusters[cluster_name][node.attrib['nodeid']]['has_sos_report'] = True
                    if (os.path.isdir(sosreport+'/sos_commands/cluster/crm_report/'+node.attrib['name'])):
                        clusters[cluster_name][node.attrib['nodeid']]['has_crm_report'] = True
            ###

## pacemaker cluster part
    if (os.path.isfile(sosreport+'/etc/corosync/corosync.conf')):
        print "## we see corosync.conf, lets parse it"
        file_coro = open(sosreport+'/etc/corosync/corosync.conf', 'r')
        # cluster name
        cl_name = re.compile(r"cluster_name\s*:\s*(\w+)\s*$", re.M+re.S)
        cl_name2 = cl_name.search(file_coro.read())
        if cl_name2:
            cluster_name = cl_name2.group(1)
            if cluster_name not in clusters:
                clusters[cluster_name] = {}
        else:
            break ## FIXME we are getting too deep
        # node list
        nodes = re.compile(r"node\s*\{([^\}.]+)\}", re.M+re.S)
        file_coro = open(sosreport+'/etc/corosync/corosync.conf', 'r')
        nodes_list = nodes.findall(file_coro.read())
        if len(nodes_list) > 0:
            print "### found some nodes"
            n_name = re.compile(r"ring0_addr\s*:\s*(\w+)\s*$", re.M)
            n_id = re.compile(r"nodeid\s*:\s*(\d+)\s*$", re.M)
            for node in nodes_list:
                n_name2 = None
                n_id2 = None
                n_name2 = n_name.search(node)
                n_id2 = n_id.search(node)
                if n_name2 and n_id2:
                    node_name = n_name2.group(1)
                    node_id = n_id2.group(1)
                    print node_name+" $$ "+node_id
                    if node_id not in clusters[cluster_name]:
                        clusters[cluster_name][node_id] = { 'name': node_name, 'node_id': node_id, 'has_crm_report': False, 'has_sos_report': False}
                    else:
                        print "not adding "+node_name+"@"+node_id
                else:
                    continue
                ###
                mymatch = None
                host_match = re.compile(r"^(?P<ip>\d+\.\d+\.\d+\.\d+)\s+" + node_name + "(\s+.*|$)")
                hfile = open(sosreport+'/etc/hosts','r')
                for line in hfile.readlines():
                    mymatch = host_match.search(line)
                    if mymatch:
                        break
                if mymatch:
                    clusters[cluster_name][node_id]['ip'] = mymatch.group('ip') 
                    if check_ip (sosreport, mymatch.group('ip')):
                        clusters[cluster_name][node_id]['has_sos_report'] = True
                        if (os.path.isdir(sosreport+'/sos_commands/cluster/crm_report/'+node_name)):
                            clusters[cluster_name][node_id]['has_crm_report'] = True
                            
                ###

print "======"
from operator import attrgetter, itemgetter
for cl in clusters:
    print "=== CLUSTER  "+cl
    print "{0:2s} {1:20s} {2:3s} {3:3s} {4:15s}".format('#','node name', 'crm', 'sos', 'IP address')
    #for n in clusters[cl]:
    for n in sorted(clusters[cl], key=int):
        if 'ip' in clusters[cl][n]:
            print "{0:2s} {1:20s} {2:3b} {3:3b} {4:15s}".format(n, clusters[cl][n]['name'], clusters[cl][n]['has_crm_report'], clusters[cl][n]['has_sos_report'], clusters[cl][n]['ip'])
        else:
            print "{0:2s} {1:20s} {2:3b} {3:3b} {4:15s}".format(n, clusters[cl][n]['name'], clusters[cl][n]['has_crm_report'], clusters[cl][n]['has_sos_report'], 'undetected')
